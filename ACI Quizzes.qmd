---
title: "Advanced Causal Inference"
author: "Felix Wortmann Callej√≥n"
format:
  revealjs:
    footer: "Advanced Causal Inference: Quizzes"
---

```{r setup}
#| echo: false
pacman::p_load(rstan, dagitty, DeclareDesign, CausalQueries, ri2, tidyverse, knitr, kableExtra)
```

# Introduction to `DeclareDesign`

## Q2.1: **False positives and** $N$s

- Sometimes people worry that with larger samples you are more likely to get a false positive. Is that true?
- Assess by generating a simple experimental design from scratch in which we can vary the `N` and *in which there is no true effect* of some treatment.

## Q2.1: **False positives and** $N$s

Then:

- Plot the distribution of $p$ values from the `simulations_df`. What shape is it and why?
- Plot the power as $N$ increases, using the `diagnosands_df`
- Plot the estimates against $p$ values for different values of $N$; what do you see?
- Discuss

## Q2.1 Answer

I proceed by copying the code for a simple experimental design from the lecture slides. Crucially, I set $\tau$ represented by `b = 0`.

```{r set_up_simple_ra_exp}
#| echo: true
b <- 0
N <- 100

design <- declare_model(N = N, U = rnorm(N), potential_outcomes(Y ~ b * Z + U)) + 
  declare_assignment(Z = simple_ra(N), Y = reveal_outcomes(Y ~ Z)) + 
  declare_inquiry(ate = mean(Y_Z_1 - Y_Z_0)) + 
  declare_estimator(Y ~ Z, inquiry = "ate", .method = lm_robust)
```

Then, I simulate the design $10^4$ times

```{r simulate_design_many_times}
#| echo: true
n_sims <- 10^4
sims <- simulate_design(design, sims = n_sims)
```

## Q2.1 Answer

And plot the density for the `p.value`s

```{r plot_pval_density }
#| echo: true
#| code-fold: true
ggplot(sims, aes(p.value)) +
  scale_x_continuous("p-value", label = scales::label_percent(1)) +
  scale_y_continuous("Probability density")  +
  geom_density(fill = "blue", color = "blue", alpha = 0.2) +
  theme_light()
```

## Q2.1 Answer

Next, I diagnose the design for a series of values of $N$

```{r rediagnose}
#| echo: true
diagnose <- redesign(design, N = c(100, 150, 200, 250, 300, 350, 400, 450, 500,
                                   1000, 1500, 2000, 2500, 3000, 3500, 4000, 4500, 5000)) |>
  diagnose_design() 
```


## Q2.1 Answer

And plot power as a function of $N$

```{r plot_power_f(N)}
#| echo: true
#| code-fold: true

ggplot(diagnose$diagnosands_df, aes(N, power)) +
  scale_x_log10("N", labels = scales::label_comma(1)) +
  scale_y_continuous("Power", limits = c(0,1), labels = scales::label_percent(1)) +
  geom_point() +
  geom_line() +
  theme_light() 
```

## Q2.1 Discussion

## Q2.2: Clustering

- Say that you have a set of 20 schools randomly sampled from a superpopulation of schools. There are 5 classrooms in each school and 5 students in each class room.
- Say you assign a treatment at the classroom level. Should you cluster your standard errors at the level of the school or at the level of the classroom?

## Q2.2: Clustering

- Declare a design with this hierarchical data structure. Allow for the possibility that treatment effects vary at the school level. Assess the performance of the standard errors when you cluster at each of these levels (and when you do not cluster at all.
- Examine whether the performance depends on whether you are interested in the population average effects or the sample average effects.

## Q2.2 Answer

First I setup the model

```{r setup_hierarchical_model}

N_school <- 20
N_classroom <- 5
N_student <- 5

b <- 4

design_hierarchical <- declare_model(schools = add_level(N = N_school, u = rnorm(N),
                                                         N_classroom = ),
                                     classrooms = add_level(N = N_classroom, v = rnorm(N)),
                                     students = add_level(N = N_student, w = rnorm(N)),
                                     potential_outcomes(Y ~ b * Z + u + v + w)) + 
  declare_assignment(Z = simple_ra(N), Y = reveal_outcomes(Y ~ Z)) + 
  declare_inquiry(ate = mean(Y_Z_1 - Y_Z_0)) + 
  declare_estimator(Y ~ Z, inquiry = "ate", .method = lm_robust)
g <- 
  declare_model()

g() |> slice(1:3, 13:15) |> kable()

```

